// Package repo_downloader provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package repo_downloader

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Downloads the specified github repository
	// (POST /v1/github.com/{owner}/{name})
	PostV1GithubComOwnerName(w http.ResponseWriter, r *http.Request, owner string, name string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Downloads the specified github repository
// (POST /v1/github.com/{owner}/{name})
func (_ Unimplemented) PostV1GithubComOwnerName(w http.ResponseWriter, r *http.Request, owner string, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostV1GithubComOwnerName operation middleware
func (siw *ServerInterfaceWrapper) PostV1GithubComOwnerName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "owner" -------------
	var owner string

	err = runtime.BindStyledParameterWithLocation("simple", false, "owner", runtime.ParamLocationPath, chi.URLParam(r, "owner"), &owner)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1GithubComOwnerName(w, r, owner, name)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/github.com/{owner}/{name}", wrapper.PostV1GithubComOwnerName)
	})

	return r
}

type PostV1GithubComOwnerNameRequestObject struct {
	Owner string `json:"owner"`
	Name  string `json:"name"`
	Body  *PostV1GithubComOwnerNameJSONRequestBody
}

type PostV1GithubComOwnerNameResponseObject interface {
	VisitPostV1GithubComOwnerNameResponse(w http.ResponseWriter) error
}

type PostV1GithubComOwnerName200JSONResponse struct {
	Destination UploadDestinationReport `json:"destination"`
}

func (response PostV1GithubComOwnerName200JSONResponse) VisitPostV1GithubComOwnerNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostV1GithubComOwnerName400JSONResponse BasicErrorModel

func (response PostV1GithubComOwnerName400JSONResponse) VisitPostV1GithubComOwnerNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostV1GithubComOwnerName429JSONResponse BasicErrorModel

func (response PostV1GithubComOwnerName429JSONResponse) VisitPostV1GithubComOwnerNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type PostV1GithubComOwnerName500JSONResponse BasicErrorModel

func (response PostV1GithubComOwnerName500JSONResponse) VisitPostV1GithubComOwnerNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Downloads the specified github repository
	// (POST /v1/github.com/{owner}/{name})
	PostV1GithubComOwnerName(ctx context.Context, request PostV1GithubComOwnerNameRequestObject) (PostV1GithubComOwnerNameResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostV1GithubComOwnerName operation middleware
func (sh *strictHandler) PostV1GithubComOwnerName(w http.ResponseWriter, r *http.Request, owner string, name string) {
	var request PostV1GithubComOwnerNameRequestObject

	request.Owner = owner
	request.Name = name

	var body PostV1GithubComOwnerNameJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1GithubComOwnerName(ctx, request.(PostV1GithubComOwnerNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1GithubComOwnerName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1GithubComOwnerNameResponseObject); ok {
		if err := validResponse.VisitPostV1GithubComOwnerNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xV207jSBD9Fat2Hw12WHbF+o3LwiLtBYXMvKAo6tjluBn3ZarLgSjKv4+6nZDEODCj",
	"kXgC9+WcU6dOV5aQG2WNRs0OsiW4vEIlwr/nlFdyjqOFxfCNulGQPcDofAjjGHhhETJwTFLPYBXDhXAy",
	"/4vI0L+mwNpfsWQsEssWIDcF+r9KPEvlsf5I0xiU1O3XwH+tUaVmnCF5WIXOiVm42KFcxUD4tZGEhde1",
	"ORi3RFuJZvqIOXusa1njtawZKeiQ+m5H4CDu6LWEpXzuIY7BNWX/1qqH9eby/pOtjSiGaA3xa2OmTf4F",
	"uZeolDVqodpzklG53mPrBUEkFhB8sWZyUH/HuDX9/q0++0aCbrVteipgQROPbif7cSqwFE3NwdwCXU7S",
	"sjQaMhhVGB0dhTtH2ztRWYtZVBqKWBDE26gMdoLSG5N2ZQm/EpaQwS/JFjRZhzrZS3TXhQDQV3Xbuyt0",
	"LLXw6g+1cZa79xR0o9CTF78kdWmCrZJrv+dPR1fmSfurSNE90lzmPupzJNcaOjhOj1Ov11jUwkrI4Lew",
	"FIMVXAVpyXyQzCRXzfQ4NypZmieNtEqWPmGrUJAgoZCRHGQPy07LbiT/3UyjcCkxNAMvFLIADzF4EF+H",
	"34Zdb5kajNeTpTeNB4h8HJ1kQ4soYPfSrXe+n20cgzUutM83L3T0toAM7ozjz4ObYM+lUf/7Ov7boqPj",
	"C1Ms2kGmGXWAENbWMg8gyaPz6pc73Pv5EG383svIyytbP/9JGSbW/gR4C2Bnyr0aDZ3QbySNe2O4b2pY",
	"cNZo15ZzkqY/YUaxfU/v1XPoAXaL2YUchwL2YzXc5qnYvKXCW3T6g5W8Jbb7K9ij40IU0UuHT0/+/Eju",
	"oWCM/pFKBvLfP7bwW81IWtSb+RWF46GPrlFK0AIy2Iw5F3GFkbOYy1JiEbVza2cotAwOab4ZVw3VkEHF",
	"bLMkqU0u6so4zs7SsxRW49W3AAAA//8hdvHl7AgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
