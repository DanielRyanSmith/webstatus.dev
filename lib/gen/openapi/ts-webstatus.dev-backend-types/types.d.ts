/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/features": {
    /** List features */
    get: {
      parameters: {
        query?: {
          page_token?: components["parameters"]["paginationTokenParam"];
          page_size?: components["parameters"]["paginationSizeParam"];
          /** @description Start range (inclusive) for when features became part of baseline */
          baseline_start_year?: number;
          /** @description End range (inclusive) for when features became part of baseline */
          baseline_end_year?: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["FeaturePage"];
          };
        };
        /** @description Bad Input */
        400: {
          content: {
            "application/json": components["schemas"]["BasicErrorModel"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["BasicErrorModel"];
          };
        };
        /** @description Rate Limit */
        429: {
          content: {
            "application/json": components["schemas"]["BasicErrorModel"];
          };
        };
        /** @description Internal Service Error */
        500: {
          content: {
            "application/json": components["schemas"]["BasicErrorModel"];
          };
        };
      };
    };
  };
  "/v1/features/{feature_id}": {
    /** Get Feature */
    get: {
      parameters: {
        path: {
          /** @description Feature ID */
          feature_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Feature"];
          };
        };
        /** @description Bad Input */
        400: {
          content: {
            "application/json": components["schemas"]["BasicErrorModel"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["BasicErrorModel"];
          };
        };
        /** @description Rate Limit */
        429: {
          content: {
            "application/json": components["schemas"]["BasicErrorModel"];
          };
        };
        /** @description Internal Service Error */
        500: {
          content: {
            "application/json": components["schemas"]["BasicErrorModel"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** @description Feature ID */
        feature_id: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    PageMetadata: {
      next_page_token?: string;
    };
    FeaturePage: {
      metadata?: components["schemas"]["PageMetadata"];
      data: components["schemas"]["Feature"][];
    };
    Feature: {
      feature_id: string;
      spec?: string[];
    };
    BasicErrorModel: {
      message: string;
      code: number;
    };
    ExtendedErrorModel: components["schemas"]["BasicErrorModel"] & {
      rootCause: string;
    };
  };
  responses: never;
  parameters?: {
    /** @description Pagination token */
    paginationTokenParam?: string;
    /** @description Number of results to return */
    paginationSizeParam?: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
