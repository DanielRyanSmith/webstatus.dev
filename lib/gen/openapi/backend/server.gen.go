// Package backend provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package backend

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List features
	// (GET /v1/features)
	GetV1Features(w http.ResponseWriter, r *http.Request, params GetV1FeaturesParams)
	// Get Feature
	// (GET /v1/features/{feature_id})
	GetV1FeaturesFeatureId(w http.ResponseWriter, r *http.Request, featureId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List features
// (GET /v1/features)
func (_ Unimplemented) GetV1Features(w http.ResponseWriter, r *http.Request, params GetV1FeaturesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Feature
// (GET /v1/features/{feature_id})
func (_ Unimplemented) GetV1FeaturesFeatureId(w http.ResponseWriter, r *http.Request, featureId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetV1Features operation middleware
func (siw *ServerInterfaceWrapper) GetV1Features(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1FeaturesParams

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", r.URL.Query(), &params.PageToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_token", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "baseline_start_year" -------------

	err = runtime.BindQueryParameter("form", true, false, "baseline_start_year", r.URL.Query(), &params.BaselineStartYear)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "baseline_start_year", Err: err})
		return
	}

	// ------------- Optional query parameter "baseline_end_year" -------------

	err = runtime.BindQueryParameter("form", true, false, "baseline_end_year", r.URL.Query(), &params.BaselineEndYear)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "baseline_end_year", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1Features(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetV1FeaturesFeatureId operation middleware
func (siw *ServerInterfaceWrapper) GetV1FeaturesFeatureId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "feature_id" -------------
	var featureId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "feature_id", runtime.ParamLocationPath, chi.URLParam(r, "feature_id"), &featureId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "feature_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1FeaturesFeatureId(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/features", wrapper.GetV1Features)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/features/{feature_id}", wrapper.GetV1FeaturesFeatureId)
	})

	return r
}

type GetV1FeaturesRequestObject struct {
	Params GetV1FeaturesParams
}

type GetV1FeaturesResponseObject interface {
	VisitGetV1FeaturesResponse(w http.ResponseWriter) error
}

type GetV1Features200JSONResponse FeaturePage

func (response GetV1Features200JSONResponse) VisitGetV1FeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1Features400JSONResponse BasicErrorModel

func (response GetV1Features400JSONResponse) VisitGetV1FeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetV1Features404JSONResponse BasicErrorModel

func (response GetV1Features404JSONResponse) VisitGetV1FeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetV1Features429JSONResponse BasicErrorModel

func (response GetV1Features429JSONResponse) VisitGetV1FeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type GetV1Features500JSONResponse BasicErrorModel

func (response GetV1Features500JSONResponse) VisitGetV1FeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetV1FeaturesFeatureIdRequestObject struct {
	FeatureId string `json:"feature_id"`
}

type GetV1FeaturesFeatureIdResponseObject interface {
	VisitGetV1FeaturesFeatureIdResponse(w http.ResponseWriter) error
}

type GetV1FeaturesFeatureId200JSONResponse Feature

func (response GetV1FeaturesFeatureId200JSONResponse) VisitGetV1FeaturesFeatureIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1FeaturesFeatureId400JSONResponse BasicErrorModel

func (response GetV1FeaturesFeatureId400JSONResponse) VisitGetV1FeaturesFeatureIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetV1FeaturesFeatureId404JSONResponse BasicErrorModel

func (response GetV1FeaturesFeatureId404JSONResponse) VisitGetV1FeaturesFeatureIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetV1FeaturesFeatureId429JSONResponse BasicErrorModel

func (response GetV1FeaturesFeatureId429JSONResponse) VisitGetV1FeaturesFeatureIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type GetV1FeaturesFeatureId500JSONResponse BasicErrorModel

func (response GetV1FeaturesFeatureId500JSONResponse) VisitGetV1FeaturesFeatureIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List features
	// (GET /v1/features)
	GetV1Features(ctx context.Context, request GetV1FeaturesRequestObject) (GetV1FeaturesResponseObject, error)
	// Get Feature
	// (GET /v1/features/{feature_id})
	GetV1FeaturesFeatureId(ctx context.Context, request GetV1FeaturesFeatureIdRequestObject) (GetV1FeaturesFeatureIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetV1Features operation middleware
func (sh *strictHandler) GetV1Features(w http.ResponseWriter, r *http.Request, params GetV1FeaturesParams) {
	var request GetV1FeaturesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1Features(ctx, request.(GetV1FeaturesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1Features")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1FeaturesResponseObject); ok {
		if err := validResponse.VisitGetV1FeaturesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1FeaturesFeatureId operation middleware
func (sh *strictHandler) GetV1FeaturesFeatureId(w http.ResponseWriter, r *http.Request, featureId string) {
	var request GetV1FeaturesFeatureIdRequestObject

	request.FeatureId = featureId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1FeaturesFeatureId(ctx, request.(GetV1FeaturesFeatureIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1FeaturesFeatureId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1FeaturesFeatureIdResponseObject); ok {
		if err := validResponse.VisitGetV1FeaturesFeatureIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWUW/jNgz+KwK3hw0wYid3N2B+22HXQ7C7LliLvRRBoNhMos6WXIrOmhb574NkO7YT",
	"N+uwa5/6ZEv8xO+jRFJ6hMTkhdGo2UL8CIUkmSMj1aO10pKV0VfqAWfO5qZTtAmpws1DDJdlvkQSZiUI",
	"bZmxFWwEIZekIQDlIHcl0g4C0DJHiJ1bXFj1gBCATTaYy8rrSpYZQxwFkMt7lZc5xJMPAeRKV4MoAN4V",
	"zoPSjGsk2O+Djshr8xfqJ1TODijBDnZOWgNotdW0lknpNewdbWX02/RRWpV8IjL01aSY+Z0jUyCxQg9I",
	"TIruewjrpyjqxDWOBiILIEdr5RqH+AMgvCsVYQrxzQEYVETzgzOzvMWEna8LlFwSnkpbVYaFSgd4ArAF",
	"Js6gGHM7iKgnJJHcnSjreD+jalZH2VeWSpY96u8JVxDDd2GbsmF9CmET34kgt40sG1/nXDgVXxvscSB+",
	"ciiE3qqTGDTe86KTU4NHeeTTTSm9Mh6sOHO2X2ZTce3/A9gi2Sqnx6PISTAFalkoiOHdKBpNwJUEbzx/",
	"uB2H9Rn48RrZfZxEXwvTFGL4jPzn+KJBBb0ecDO8Zy0kHCy/ffAf1rW9xS3rl+0VS2JBUq9R/KB0kpVW",
	"bfFHsTIk/t6gFk10YomJzFEUDm9WYiktZkrjE3XemBfWESx2KKlX8G0DiibvOqVaDU+70LHuTzp9SdWo",
	"0/+tee4y3BZG2yo3JlFU9SrNqH2ayKLIVOLPKLy1xqdvS/eMcvSF7RO6vzu//+by9v03JDxuwQOkH2Uq",
	"prooueJ+/5rcl4bFhSl16rknP78m9x+SUXxRufKBf3jdTZ9qRtIyE1dIW5Wg8HDf9myZ55J2EMMXZflQ",
	"Et7W7VvhY3uL7J/XxOrvNIWXz/G3/H7L73/J78/IovNAObpf+w5rnJj+2twB7jJvr4DOi6r7QmEq8dyD",
	"de4VIW0b1pIyiGHDXNg4DGWhRpV1xGg53I5hP9//EwAA//9Z8xj9HQwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
